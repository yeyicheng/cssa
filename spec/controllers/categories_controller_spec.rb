require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CategoriesController do
	render_views
	
	before do
		FactoryGirl.create(:weather)
	end
	
	describe "GET index" do
		before do
			@categories = []
			30.times do
				@categories << FactoryGirl.create(:category, :name => FactoryGirl.generate(:name))
			end
			@user = FactoryGirl.create(:user)
			get :index
		end
		describe 'not signed-in and signed in' do
			it "should be successful" do
				response.should be_success
			end
			it "should have the right title" do
				response.should have_selector("title", :content => "Clubs | category")
			end
			it "should have an element for each category" do
				@categories[0..8].each do |cat|
					response.should have_selector("a", :href => category_path(cat), :content => cat[:name])
				end
			end
			it "should paginate categories" do
				response.should have_selector("div.pagination")
				response.should have_selector("span.disabled", :content => "Previous")
				response.should have_selector("a", :href => "/categories?category_page=2", :content => "2")
				response.should have_selector("a", :href => "/categories?category_page=2", :content => "Nex")
			end
			it 'should not show a new category link' do
				test_sign_in @user
				get :index
				response.should_not have_selector('a', :href => '/categories/new', :content => 'New category')
			end
		end
		describe 'signed-in as admin' do
			before do
				@user.toggle! :admin
				test_sign_in @user
				get :index
			end
			it 'should show a new category link when signed in as admin' do
				response.should have_selector("a", :href => "/categories/new", :content => "New category")
			end
		end
	end

	describe "GET 'show'" do
		before do
			@user = FactoryGirl.create(:user)
			@cat = FactoryGirl.create(:category)
			@clubs = []
			20.times.each do
				@clubs << FactoryGirl.create(:organization, :email => FactoryGirl.generate(:email), :name => FactoryGirl.generate(:name), :category_id => @cat.id)
			end
			test_sign_in @user
			get :show, :id => @cat
		end
		describe 'as a non-admin' do
			it "should be success" do
				response.should be_success
			end
			it "should have the right title" do
				response.should have_selector("title", :content => 'Clubs | ' + @cat.name)
			end
			it "should include the category's name" do
				response.should have_selector("h1", :content => @cat.name)
			end
			it "should paginate clubs" do
				response.should have_selector("div.pagination")
				response.should have_selector("span.disabled", :content => "Previous")
				response.should have_selector("a", :href => "/categories/#{@cat.id}?organization_page=2", :content => "2")
				response.should have_selector("a", :href => "/categories/#{@cat.id}?organization_page=2", :content => "Next")
			end
			it 'should show a back link' do
				response.should have_selector("a", :href => "/categories", :content => "Back")
			end
		end
		describe 'as admin' do
			it 'should show new club link' do
				@user.toggle!(:admin)
				get :show, :id => @cat
				response.should have_selector("a", :href => "/organizations/new", :content => "New club")
			end
		end
	end                                                               

	describe "GET 'new'" do
		before do
			@user = FactoryGirl.create(:user)
			@club = FactoryGirl.create(:category)
			@user.toggle!(:admin)
			test_sign_in @user
			get :new
		end
		it "returns http success" do
			response.should be_success
		end
		it "should have the right title" do
			response.should have_selector("title", :content => "Category | New")
		end
		it 'should show a back link' do
			response.should have_selector("a", :href => "/categories", :content => "Back")
		end
	end
	
	describe "GET edit" do
		before do
			@user = FactoryGirl.create(:user)
			@cat = FactoryGirl.create(:category)
			@user.toggle!(:admin)
			test_sign_in @user
			get :edit, :id => @cat
		end
		it "returns http success" do
			response.should be_success
		end
		it "should have the right title" do
			response.should have_selector("title", :content => "Category | " + @cat[:name] + " | Edit")
		end
		it 'should show a back link' do
			response.should have_selector("a", :href => "/categories", :content => "Back")
		end
	end

	describe "POST create" do
		describe "with valid params" do
			before do
				@user = FactoryGirl.create(:user)
				@user.toggle! :admin
				test_sign_in @user
			end

			it "creates a new Category" do
				expect {
					post :create, {:category => {:name => 'Category-sample', :description => 'lalalaalalalalala'}}
				}.to change(Category, :count).by(1)
			end
			
			it "redirects to the created category" do
				post :create, {:category => {:name => 'Category-sample', :description => 'lalalaalalalalala'}}
				response.should redirect_to(Category.last)
			end
		end
	
		describe "with invalid params" do
			before do
				@user = FactoryGirl.create(:user)
				@user.toggle! :admin
				test_sign_in @user
			end

			it "re-renders the 'new' template" do
				post :create, {:category => {}}
				response.should render_template("new")
			end
		end
	end
	
	describe "PUT update" do
		describe "with valid params" do
			
		end
	
		describe "with invalid params" do
			
		end
	end
	
	describe "DELETE destroy" do
	end
end
